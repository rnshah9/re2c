extern const char *help;
const char *help =
"USAGE\n"
"          re2c    [ OPTIONS ] [ WARNINGS ] INPUT\n"
"          re2go   [ OPTIONS ] [ WARNINGS ] INPUT\n"
"          re2rust [ OPTIONS ] [ WARNINGS ] INPUT\n"
"\n"
"       Input can be either a file or - for stdin.\n"
"\n"
"OPTIONS\n"
"       -? --help -h\n"
"              Show help message.\n"
"\n"
"       --api --input <default | custom>\n"
"              Specify  the  API  used  by the generated code to interface with\n"
"              used-defined code: default is the API based  on  pointer  arith‐\n"
"              metic  (the  default  for C), and custom is the generic API (the\n"
"              default for Go and Rust).\n"
"\n"
"       --bit-vectors -b\n"
"              Optimize conditional jumps using bit masks.  This option implies\n"
"              --nested-ifs.\n"
"\n"
"       --case-insensitive\n"
"              Treat  single-quoted  and double-quoted strings as case-insensi‐\n"
"              tive.\n"
"\n"
"       --case-inverted\n"
"              Invert the meaning of single-quoted and  double-quoted  strings:\n"
"              treat  single-quoted strings as case-sensitive and double-quoted\n"
"              strings as case-insensitive.\n"
"\n"
"       --case-ranges\n"
"              Collapse consecutive cases in a switch statements into  a  range\n"
"              of the form low ... high. This syntax is a C/C++ language exten‐\n"
"              sion that is supported by compilers like GCC, Clang and Tcc. The\n"
"              main advantage over using single cases is smaller generated code\n"
"              and faster generation time, although for some compilers like Tcc\n"
"              it  also  results  in  smaller binary size.  This option is sup‐\n"
"              ported only for C.\n"
"\n"
"       --computed-gotos -g\n"
"              Optimize conditional jumps using  non-standard  \"computed  goto\"\n"
"              extension (which must be supported by the compiler). re2c gener‐\n"
"              ates jump tables only in complex cases with a lot of conditional\n"
"              branches.   Complexity   threshold   can   be   configured  with\n"
"              cgoto:threshold configuration. This  option  implies  --bit-vec‐\n"
"              tors. It is supported only for C.\n"
"\n"
"       --conditions --start-conditions -c\n"
"              Enable  support of Flex-like \"conditions\": multiple interrelated\n"
"              lexers within one block. This  is  an  alternative  to  manually\n"
"              specifying different re2c blocks connected with goto or function\n"
"              calls.\n"
"\n"
"       --depfile FILE\n"
"              Write dependency information to FILE in the form of  a  Makefile\n"
"              rule  <output-file>  : <input-file> [include-file ...]. This al‐\n"
"              lows one to track build dependencies  in  the  presence  of  in‐\n"
"              clude:re2c  directives,  so that updating include files triggers\n"
"              regeneration of the output file.  This  option  depends  on  the\n"
"              --output option.\n"
"\n"
"       --ebcdic --ecb -e\n"
"              Generate  a  lexer that reads input in EBCDIC encoding. re2c as‐\n"
"              sumes that the character range is 0 -- 0xFF and  character  size\n"
"              is 1 byte.\n"
"\n"
"       --empty-class <match-empty | match-none | error>\n"
"              Define  the  way  re2c  treats  empty  character  classes.  With\n"
"              match-empty (the default) empty class matches empty input (which\n"
"              is  illogical,  but backwards-compatible). With match-none empty\n"
"              class always fails to match.  With error empty  class  raises  a\n"
"              compilation error.\n"
"\n"
"       --encoding-policy <fail | substitute | ignore>\n"
"              Define  the  way re2c treats Unicode surrogates.  With fail re2c\n"
"              aborts with an error when a surrogate is encountered.  With sub‐\n"
"              stitute  re2c  silently  replaces surrogates with the error code\n"
"              point 0xFFFD. With ignore (the default) re2c  treats  surrogates\n"
"              as normal code points. The Unicode standard says that standalone\n"
"              surrogates are invalid, but real-world  libraries  and  programs\n"
"              behave in different ways.\n"
"\n"
"       --flex-syntax -F\n"
"              Partial  support for Flex syntax: in this mode named definitions\n"
"              don't need the equal sign and  the  terminating  semicolon,  and\n"
"              when used they must be surrounded with curly braces. Names with‐\n"
"              out curly braces are treated as double-quoted strings.\n"
"\n"
"       --header --type-header -t HEADER\n"
"              Generate a HEADER file. The contents of the file can  be  speci‐\n"
"              fied  with  directives  header:re2c:on  and header:re2c:off.  If\n"
"              conditions are used the header will have a condition enum  auto‐\n"
"              matically  appended  to  it  (unless there is an explicit condi‐\n"
"              tions:re2c directive).\n"
"\n"
"       -I PATH\n"
"              Add PATH to the list of locations which are used when  searching\n"
"              for include files. This option is useful in combination with in‐\n"
"              clude:re2c directive. re2c looks for FILE in  the  directory  of\n"
"              the  parent  file and in the include locations specified with -I\n"
"              option.\n"
"\n"
"       --input-encoding <ascii | utf8>\n"
"              Specify the way re2c parses  regular  expressions.   With  ascii\n"
"              (the  default) re2c handles input as ASCII-encoded: any sequence\n"
"              of code units is a sequence  of  standalone  1-byte  characters.\n"
"              With  utf8  re2c  handles  input  as UTF8-encoded and recognizes\n"
"              multibyte characters.\n"
"\n"
"       --lang <c | go | rust>\n"
"              Specify the output language. Supported languages are C,  Go  and\n"
"              Rust.   The  default  is  C  for re2c, Go for re2go and Rust for\n"
"              re2rust.\n"
"\n"
"       --location-format <gnu | msvc>\n"
"              Specify location format in messages.   With  gnu  locations  are\n"
"              printed as 'filename:line:column: ...'.  With msvc locations are\n"
"              printed as 'filename(line,column) ...'.  The default is gnu.\n"
"\n"
"       --loop-switch\n"
"              Encode DFA in a form of a loop over a switch statement. Individ‐\n"
"              ual  states  are  switch cases. The current state is stored in a\n"
"              variable yystate.  Transitions between states update yystate  to\n"
"              the case label of the destination state and continue to the head\n"
"              of the loop. This option is always enabled for Rust, as  it  has\n"
"              no  goto  statement and cannot use the goto/label approach which\n"
"              is the default for C and Go backends.\n"
"\n"
"       --nested-ifs -s\n"
"              Use nested if statements instead of switch statements in  condi‐\n"
"              tional  jumps.  This usually results in more efficient code with\n"
"              non-optimizing compilers.\n"
"\n"
"       --no-debug-info -i\n"
"              Do not output line directives. This may be useful when the  gen‐\n"
"              erated code is stored in a version control system (to avoid huge\n"
"              autogenerated diffs on small changes). This option is on by  de‐\n"
"              fault for Rust, as it does not have line directives.\n"
"\n"
"       --no-generation-date\n"
"              Suppress date output in the generated file.\n"
"\n"
"       --no-version\n"
"              Suppress version output in the generated file.\n"
"\n"
"       --no-unsafe\n"
"              Do  not generate unsafe wrapper over YYPEEK (this option is spe‐\n"
"              cific to Rust). For  performance  reasons  YYPEEK  should  avoid\n"
"              bounds-checking,  as  the  lexer  already  performs end-of-input\n"
"              checks in a more efficient way.  The user may choose to  provide\n"
"              a safe YYPEEK definition, or a definition that is unsafe only in\n"
"              release builds, in which case the --no-unsafe  option  helps  to\n"
"              avoid warnings about redundant unsafe blocks.\n"
"\n"
"       --output -o OUTPUT\n"
"              Specify the OUTPUT file.\n"
"\n"
"       --posix-captures -P\n"
"              Enable submatch extraction with POSIX-style capturing groups.\n"
"\n"
"       --reusable -r\n"
"              Deprecated since version 2.2 (reusable blocks are allowed by de‐\n"
"              fault now).\n"
"\n"
"       --skeleton -S\n"
"              Ignore user-defined interface code and generate a self-contained\n"
"              \"skeleton\"  program.  Additionally,  generate  input  files with\n"
"              strings derived from the regular grammar  and  compressed  match\n"
"              results  that  are used to verify \"skeleton\" behavior on all in‐\n"
"              puts. This option is useful for finding  bugs  in  optimizations\n"
"              and code generation. This option is supported only for C.\n"
"\n"
"       --storable-state -f\n"
"              Generate  a lexer which can store its inner state.  This is use‐\n"
"              ful in push-model lexers which are stopped by an  outer  program\n"
"              when there is not enough input, and then resumed when more input\n"
"              becomes available. In this mode users should additionally define\n"
"              YYGETSTATE  and YYSETSTATE primitives, and variables yych, yyac‐\n"
"              cept and state should be part of the stored lexer state.\n"
"\n"
"       --tags -T\n"
"              Enable submatch extraction with tags.\n"
"\n"
"       --ucs2 --wide-chars -w\n"
"              Generate a lexer that reads  UCS2-encoded  input.  re2c  assumes\n"
"              that  the character range is 0 -- 0xFFFF and character size is 2\n"
"              bytes.  This option implies --nested-ifs.\n"
"\n"
"       --utf8 --utf-8 -8\n"
"              Generate a lexer that reads input in UTF-8  encoding.  re2c  as‐\n"
"              sumes  that  the  character range is 0 -- 0x10FFFF and character\n"
"              size is 1 byte.\n"
"\n"
"       --utf16 --utf-16 -x\n"
"              Generate a lexer that reads UTF16-encoded  input.  re2c  assumes\n"
"              that  the character range is 0 -- 0x10FFFF and character size is\n"
"              2 bytes.  This option implies --nested-ifs.\n"
"\n"
"       --utf32 --unicode -u\n"
"              Generate a lexer that reads UTF32-encoded  input.  re2c  assumes\n"
"              that  the character range is 0 -- 0x10FFFF and character size is\n"
"              4 bytes.  This option implies --nested-ifs.\n"
"\n"
"       --verbose\n"
"              Output a short message in case of success.\n"
"\n"
"       --vernum -V\n"
"              Show version information in MMmmpp format (major, minor, patch).\n"
"\n"
"       --version -v\n"
"              Show version information.\n"
"\n"
"       --single-pass -1\n"
"              Deprecated. Does nothing (single pass is the default now).\n"
"\n"
"       --debug-output -d\n"
"              Emit YYDEBUG invocations in the generated code. This  is  useful\n"
"              to trace lexer execution.\n"
"\n"
"       --dump-adfa\n"
"              Debug option: output DFA after tunneling (in .dot format).\n"
"\n"
"       --dump-cfg\n"
"              Debug  option:  output  control  flow graph of tag variables (in\n"
"              .dot format).\n"
"\n"
"       --dump-closure-stats\n"
"              Debug option: output statistics on the number of states in  clo‐\n"
"              sure.\n"
"\n"
"       --dump-dfa-det\n"
"              Debug  option:  output DFA immediately after determinization (in\n"
"              .dot format).\n"
"\n"
"       --dump-dfa-min\n"
"              Debug option: output DFA after minimization (in .dot format).\n"
"\n"
"       --dump-dfa-tagopt\n"
"              Debug option: output DFA after tag optimizations (in  .dot  for‐\n"
"              mat).\n"
"\n"
"       --dump-dfa-tree\n"
"              Debug  option:  output DFA under construction with states repre‐\n"
"              sented as tag history trees (in .dot format).\n"
"\n"
"       --dump-dfa-raw\n"
"              Debug  option:  output  DFA  under  construction  with  expanded\n"
"              state-sets (in .dot format).\n"
"\n"
"       --dump-interf\n"
"              Debug  option:  output  interference  table produced by liveness\n"
"              analysis of tag variables.\n"
"\n"
"       --dump-nfa\n"
"              Debug option: output NFA (in .dot format).\n"
"\n"
"       --emit-dot -D\n"
"              Instead of normal output generate lexer graph  in  .dot  format.\n"
"              The  output  can  be  converted  to  an  image  with the help of\n"
"              Graphviz (e.g. something like dot -Tpng -odfa.png dfa.dot).\n"
"\n"
"       --dfa-minimization <moore | table>\n"
"              Internal option: DFA minimization algorithm used  by  re2c.  The\n"
"              moore option is the Moore algorithm (it is the default). The ta‐\n"
"              ble option is the \"table  filling\"  algorithm.  Both  algorithms\n"
"              should produce the same DFA up to states relabeling; table fill‐\n"
"              ing is simpler and much slower and serves as a reference  imple‐\n"
"              mentation.\n"
"\n"
"       --eager-skip\n"
"              Internal  option: make the generated lexer advance the input po‐\n"
"              sition eagerly -- immediately after reading  the  input  symbol.\n"
"              This changes the default behavior when the input position is ad‐\n"
"              vanced lazily -- after transition to the next state.\n"
"\n"
"       --no-lookahead\n"
"              Internal option, deprecated.  It used to  enable  TDFA(0)  algo‐\n"
"              rithm. Unlike TDFA(1), TDFA(0) algorithm does not use one-symbol\n"
"              lookahead. It applies register operations to the incoming  tran‐\n"
"              sitions  rather  than  the outgoing ones. Benchmarks showed that\n"
"              TDFA(0) algorithm is less efficient than TDFA(1).\n"
"\n"
"       --no-optimize-tags\n"
"              Internal option: suppress optimization of tag variables  (useful\n"
"              for debugging).\n"
"\n"
"       --posix-closure <gor1 | gtop>\n"
"              Internal  option:  specify  shortest-path algorithm used for the\n"
"              construction of epsilon-closure with POSIX disambiguation seman‐\n"
"              tics:  gor1  (the default) stands for Goldberg-Radzik algorithm,\n"
"              and gtop stands for \"global topological order\" algorithm.\n"
"\n"
"       --posix-prectable <complex | naive>\n"
"              Internal option: specify the algorithm  used  to  compute  POSIX\n"
"              precedence  table. The complex algorithm computes precedence ta‐\n"
"              ble in one traversal of tag history tree and has quadratic  com‐\n"
"              plexity  in  the  number  of TNFA states; it is the default. The\n"
"              naive algorithm has worst-case cubic complexity in the number of\n"
"              TNFA  states,  but  it  is  much simpler than complex and may be\n"
"              slightly faster in non-pathological cases.\n"
"\n"
"       --stadfa\n"
"              Internal option, deprecated.  It used  to  enable  staDFA  algo‐\n"
"              rithm,  which  differs from TDFA in that register operations are\n"
"              placed in states rather than on transitions.  Benchmarks  showed\n"
"              that staDFA algorithm is less efficient than TDFA.\n"
"\n"
"       --fixed-tags <none | toplevel | all>\n"
"              Internal  option:  specify  whether  the  fixed-tag optimization\n"
"              should be applied to all tags (all), none  of  them  (none),  or\n"
"              only  those in toplevel concatenation (toplevel). The default is\n"
"              all.  \"Fixed\" tags are those that are  located  within  a  fixed\n"
"              distance  to  some other tag (called \"base\"). In such cases only\n"
"              the base tag needs to be tracked, and the value of the fixed tag\n"
"              can  be computed as the value of the base tag plus a static off‐\n"
"              set. For tags that are under alternative  or  repetition  it  is\n"
"              also necessary to check if the base tag has a no-match value (in\n"
"              that case fixed tag should also be set to no-match, disregarding\n"
"              the  offset).  For  tags in top-level concatenation the check is\n"
"              not needed, because they always match.\n"
"\n"
"WARNINGS\n"
"       -W     Turn on all warnings.\n"
"\n"
"       -Werror\n"
"              Turn warnings into errors. Note that this option  alone  doesn't\n"
"              turn  on  any warnings; it only affects those warnings that have\n"
"              been turned on so far or will be turned on later.\n"
"\n"
"       -W<warning>\n"
"              Turn on warning.\n"
"\n"
"       -Wno-<warning>\n"
"              Turn off warning.\n"
"\n"
"       -Werror-<warning>\n"
"              Turn on warning and treat it as an error (this implies  -W<warn‐\n"
"              ing>).\n"
"\n"
"       -Wno-error-<warning>\n"
"              Don't  treat  this  particular warning as an error. This doesn't\n"
"              turn off the warning itself.\n"
"\n"
"       -Wcondition-order\n"
"              Warn if the generated program makes implicit  assumptions  about\n"
"              condition  numbering. One should use either the ---header option\n"
"              or the conditions:re2c directive to generate a mapping of condi‐\n"
"              tion  names  to numbers and then use the autogenerated condition\n"
"              names.\n"
"\n"
"       -Wempty-character-class\n"
"              Warn if a regular expression contains an empty character  class.\n"
"              Trying  to  match  an  empty  character class makes no sense: it\n"
"              should always fail.  However, for backwards  compatibility  rea‐\n"
"              sons  re2c  permits  empty  character classes and treats them as\n"
"              empty strings. Use the --empty-class option to  change  the  de‐\n"
"              fault behavior.\n"
"\n"
"       -Wmatch-empty-string\n"
"              Warn  if  a  rule is nullable (matches an empty string).  If the\n"
"              lexer runs in a loop and the empty match is  unintentional,  the\n"
"              lexer may unexpectedly hang in an infinite loop.\n"
"\n"
"       -Wswapped-range\n"
"              Warn  if  the  lower  bound of a range is greater than its upper\n"
"              bound. The default  behavior  is  to  silently  swap  the  range\n"
"              bounds.\n"
"\n"
"       -Wundefined-control-flow\n"
"              Warn  if  some input strings cause undefined control flow in the\n"
"              lexer (the faulty patterns are reported). This  is  a  dangerous\n"
"              and common mistake. It can be easily fixed by adding the default\n"
"              rule * which has the lowest priority, matches any code unit, and\n"
"              always consumes a single code unit.\n"
"\n"
"       -Wunreachable-rules\n"
"              Warn about rules that are shadowed by other rules and will never\n"
"              match.\n"
"\n"
"       -Wuseless-escape\n"
"              Warn if a symbol is escaped when it shouldn't be.   By  default,\n"
"              re2c  silently  ignores such escapes, but this may as well indi‐\n"
"              cate a typo or an error in the escape sequence.\n"
"\n"
"       -Wnondeterministic-tags\n"
"              Warn if a tag has n-th degree  of  nondeterminism,  where  n  is\n"
"              greater than 1.\n"
"\n"
"       -Wsentinel-in-midrule\n"
"              Warn  if  the sentinel symbol occurs in the middle of a rule ---\n"
"              this may cause reads past the end of buffer, crashes  or  memory\n"
"              corruption in the generated lexer. This warning is only applica‐\n"
"              ble if the sentinel method of checking for the end of  input  is\n"
"              used.   It  is set to an error if re2c:sentinel configuration is\n"
"              used.\n"
;
